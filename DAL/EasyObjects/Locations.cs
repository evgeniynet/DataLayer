/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.Common;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace BWA.bigWebDesk.DAL
{

	#region Schema

	public class LocationsSchema : NCI.EasyObjects.Schema
	{
		private static ArrayList _entries;
		public static SchemaItem Id = new SchemaItem("Id", DbType.Int32, true, false, false, true, true, false);
		public static SchemaItem DId = new SchemaItem("DId", DbType.Int32, false, false, false, true, true, false);
		public static SchemaItem ParentId = new SchemaItem("ParentId", DbType.Int32, false, true, false, false, true, false);
		public static SchemaItem AccountId = new SchemaItem("AccountId", DbType.Int32, false, true, false, false, true, false);
		public static SchemaItem LocationTypeId = new SchemaItem("LocationTypeId", DbType.Int32, false, false, false, false, true, false);
		public static SchemaItem Name = new SchemaItem("Name", DbType.AnsiString, SchemaItemJustify.None, 50, false, false, false, false);
		public static SchemaItem Inactive = new SchemaItem("Inactive", DbType.Boolean, false, false, false, false, false, true);
		public static SchemaItem Country = new SchemaItem("Country", DbType.AnsiString, SchemaItemJustify.None, 50, true, false, false, false);
		public static SchemaItem State = new SchemaItem("State", DbType.AnsiString, SchemaItemJustify.None, 50, true, false, false, false);
		public static SchemaItem City = new SchemaItem("City", DbType.AnsiString, SchemaItemJustify.None, 50, true, false, false, false);
		public static SchemaItem Address1 = new SchemaItem("Address1", DbType.AnsiString, SchemaItemJustify.None, 255, true, false, false, false);
		public static SchemaItem Address2 = new SchemaItem("Address2", DbType.AnsiString, SchemaItemJustify.None, 255, true, false, false, false);
		public static SchemaItem ZipCode = new SchemaItem("ZipCode", DbType.AnsiString, SchemaItemJustify.None, 20, true, false, false, false);
		public static SchemaItem Phone1 = new SchemaItem("Phone1", DbType.AnsiString, SchemaItemJustify.None, 20, true, false, false, false);
		public static SchemaItem Phone2 = new SchemaItem("Phone2", DbType.AnsiString, SchemaItemJustify.None, 20, true, false, false, false);
		public static SchemaItem WorkPlaces = new SchemaItem("WorkPlaces", DbType.Int32, false, true, false, false, false, false);
		public static SchemaItem RoomNumber = new SchemaItem("RoomNumber", DbType.AnsiString, SchemaItemJustify.None, 10, true, false, false, false);
		public static SchemaItem RoomSize = new SchemaItem("RoomSize", DbType.Decimal, false, true, false, false, false, false);
		public static SchemaItem Description = new SchemaItem("Description", DbType.AnsiString, SchemaItemJustify.None, 512, true, false, false, false);
		public static SchemaItem IsDefault = new SchemaItem("IsDefault", DbType.Boolean, false, false, false, false, false, true);

		public override ArrayList SchemaEntries
		{
			get
			{
				if (_entries == null )
				{
					_entries = new ArrayList();
					_entries.Add(LocationsSchema.Id);
					_entries.Add(LocationsSchema.DId);
					_entries.Add(LocationsSchema.ParentId);
					_entries.Add(LocationsSchema.AccountId);
					_entries.Add(LocationsSchema.LocationTypeId);
					_entries.Add(LocationsSchema.Name);
					_entries.Add(LocationsSchema.Inactive);
					_entries.Add(LocationsSchema.Country);
					_entries.Add(LocationsSchema.State);
					_entries.Add(LocationsSchema.City);
					_entries.Add(LocationsSchema.Address1);
					_entries.Add(LocationsSchema.Address2);
					_entries.Add(LocationsSchema.ZipCode);
					_entries.Add(LocationsSchema.Phone1);
					_entries.Add(LocationsSchema.Phone2);
					_entries.Add(LocationsSchema.WorkPlaces);
					_entries.Add(LocationsSchema.RoomNumber);
					_entries.Add(LocationsSchema.RoomSize);
					_entries.Add(LocationsSchema.Description);
					_entries.Add(LocationsSchema.IsDefault);
				}
				return _entries;
			}
		}
	}
	#endregion

	public abstract class Locations : EasyObject
	{

		public Locations()
		{
			LocationsSchema _schema = new LocationsSchema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "dbo";
		}
		
		public override void FlushData() 	 
		{ 	 
			this._whereClause = null; 	 
			this._aggregateClause = null; 	 
			base.FlushData(); 	 
		}
			   
		/// <summary>
		/// Loads the business object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="Id"></param>
		/// <param name="DId"></param>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadByPrimaryKey(int Id, int DId)
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					ListDictionary parameters = new ListDictionary();

					// Add in parameters
					parameters.Add(LocationsSchema.Id.FieldName, Id);
					parameters.Add(LocationsSchema.DId.FieldName, DId);

					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "GetLocations", parameters, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.Id.Value = Id;
					this.Where.DId.Value = DId;
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}
	
		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll3()
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "GetAllLocations", null, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		/// <summary>
		/// Adds a new record to the internal table.
		/// </summary>
		public override void AddNew()
		{
			base.AddNew();
		}

		protected override DbCommand GetInsertCommand(CommandType commandType)
		{	
			DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "AddLocations";
					dbCommand = db.GetStoredProcCommand(sqlCommand);

					db.AddParameter(dbCommand, "Id", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "Id", DataRowVersion.Default, Convert.DBNull);
					CreateParameters(db, dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddInsertColumn(item);
						}
					}
					dbCommand = this.Query.GetInsertCommandWrapper();

					dbCommand.Parameters.Clear();
					CreateParameters(db, dbCommand);
					db.AddParameter(dbCommand, "Id", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "Id", DataRowVersion.Default, Convert.DBNull);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetUpdateCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "UpdateLocations";
					dbCommand = db.GetStoredProcCommand(sqlCommand);

					db.AddInParameter(dbCommand, "Id", DbType.Int32, "Id", DataRowVersion.Current);
					CreateParameters(db, dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddUpdateColumn(item);
						}
					}

					this.Where.WhereClauseReset();
					this.Where.Id.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetUpdateCommandWrapper();

					dbCommand.Parameters.Clear();
					CreateParameters(db, dbCommand);
					db.AddInParameter(dbCommand, "Id", DbType.Int32, "Id", DataRowVersion.Current);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetDeleteCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "DeleteLocations";
					dbCommand = db.GetStoredProcCommand(sqlCommand);
					db.AddInParameter(dbCommand, "Id", DbType.Int32, "Id", DataRowVersion.Current);
					db.AddInParameter(dbCommand, "DId", DbType.Int32, "DId", DataRowVersion.Current);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.Id.Operator = WhereParameter.Operand.Equal;
					this.Where.DId.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetDeleteCommandWrapper();

					dbCommand.Parameters.Clear();
					db.AddInParameter(dbCommand, "Id", DbType.Int32, "Id", DataRowVersion.Current);
					db.AddInParameter(dbCommand, "DId", DbType.Int32, "DId", DataRowVersion.Current);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		private void CreateParameters(Database db, DbCommand dbCommand)
		{
			db.AddInParameter(dbCommand, "DId", DbType.Int32, "DId", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ParentId", DbType.Int32, "ParentId", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "AccountId", DbType.Int32, "AccountId", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "LocationTypeId", DbType.Int32, "LocationTypeId", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Name", DbType.AnsiString, "Name", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Inactive", DbType.Boolean, "Inactive", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Country", DbType.AnsiString, "Country", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "State", DbType.AnsiString, "State", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "City", DbType.AnsiString, "City", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Address1", DbType.AnsiString, "Address1", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Address2", DbType.AnsiString, "Address2", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ZipCode", DbType.AnsiString, "ZipCode", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Phone1", DbType.AnsiString, "Phone1", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Phone2", DbType.AnsiString, "Phone2", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "WorkPlaces", DbType.Int32, "WorkPlaces", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "RoomNumber", DbType.AnsiString, "RoomNumber", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "RoomSize", DbType.Decimal, "RoomSize", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Description", DbType.AnsiString, "Description", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "IsDefault", DbType.Boolean, "IsDefault", DataRowVersion.Current);
		}
		
		#region Properties
		public virtual int Id
		{
			get
			{
				return this.GetInteger(LocationsSchema.Id.FieldName);
	    	}
			set
			{
				this.SetInteger(LocationsSchema.Id.FieldName, value);
			}
		}
		public virtual int DId
		{
			get
			{
				return this.GetInteger(LocationsSchema.DId.FieldName);
	    	}
			set
			{
				this.SetInteger(LocationsSchema.DId.FieldName, value);
			}
		}
		public virtual int ParentId
		{
			get
			{
				return this.GetInteger(LocationsSchema.ParentId.FieldName);
	    	}
			set
			{
				this.SetInteger(LocationsSchema.ParentId.FieldName, value);
			}
		}
		public virtual int AccountId
		{
			get
			{
				return this.GetInteger(LocationsSchema.AccountId.FieldName);
	    	}
			set
			{
				this.SetInteger(LocationsSchema.AccountId.FieldName, value);
			}
		}
		public virtual int LocationTypeId
		{
			get
			{
				return this.GetInteger(LocationsSchema.LocationTypeId.FieldName);
	    	}
			set
			{
				this.SetInteger(LocationsSchema.LocationTypeId.FieldName, value);
			}
		}
		public virtual string Name
		{
			get
			{
				return this.GetString(LocationsSchema.Name.FieldName);
	    	}
			set
			{
				this.SetString(LocationsSchema.Name.FieldName, value);
			}
		}
		public virtual bool Inactive
		{
			get
			{
				return this.GetBoolean(LocationsSchema.Inactive.FieldName);
	    	}
			set
			{
				this.SetBoolean(LocationsSchema.Inactive.FieldName, value);
			}
		}
		public virtual string Country
		{
			get
			{
				return this.GetString(LocationsSchema.Country.FieldName);
	    	}
			set
			{
				this.SetString(LocationsSchema.Country.FieldName, value);
			}
		}
		public virtual string State
		{
			get
			{
				return this.GetString(LocationsSchema.State.FieldName);
	    	}
			set
			{
				this.SetString(LocationsSchema.State.FieldName, value);
			}
		}
		public virtual string City
		{
			get
			{
				return this.GetString(LocationsSchema.City.FieldName);
	    	}
			set
			{
				this.SetString(LocationsSchema.City.FieldName, value);
			}
		}
		public virtual string Address1
		{
			get
			{
				return this.GetString(LocationsSchema.Address1.FieldName);
	    	}
			set
			{
				this.SetString(LocationsSchema.Address1.FieldName, value);
			}
		}
		public virtual string Address2
		{
			get
			{
				return this.GetString(LocationsSchema.Address2.FieldName);
	    	}
			set
			{
				this.SetString(LocationsSchema.Address2.FieldName, value);
			}
		}
		public virtual string ZipCode
		{
			get
			{
				return this.GetString(LocationsSchema.ZipCode.FieldName);
	    	}
			set
			{
				this.SetString(LocationsSchema.ZipCode.FieldName, value);
			}
		}
		public virtual string Phone1
		{
			get
			{
				return this.GetString(LocationsSchema.Phone1.FieldName);
	    	}
			set
			{
				this.SetString(LocationsSchema.Phone1.FieldName, value);
			}
		}
		public virtual string Phone2
		{
			get
			{
				return this.GetString(LocationsSchema.Phone2.FieldName);
	    	}
			set
			{
				this.SetString(LocationsSchema.Phone2.FieldName, value);
			}
		}
		public virtual int WorkPlaces
		{
			get
			{
				return this.GetInteger(LocationsSchema.WorkPlaces.FieldName);
	    	}
			set
			{
				this.SetInteger(LocationsSchema.WorkPlaces.FieldName, value);
			}
		}
		public virtual string RoomNumber
		{
			get
			{
				return this.GetString(LocationsSchema.RoomNumber.FieldName);
	    	}
			set
			{
				this.SetString(LocationsSchema.RoomNumber.FieldName, value);
			}
		}
		public virtual decimal RoomSize
		{
			get
			{
				return this.GetDecimal(LocationsSchema.RoomSize.FieldName);
	    	}
			set
			{
				this.SetDecimal(LocationsSchema.RoomSize.FieldName, value);
			}
		}
		public virtual string Description
		{
			get
			{
				return this.GetString(LocationsSchema.Description.FieldName);
	    	}
			set
			{
				this.SetString(LocationsSchema.Description.FieldName, value);
			}
		}
		public virtual bool IsDefault
		{
			get
			{
				return this.GetBoolean(LocationsSchema.IsDefault.FieldName);
	    	}
			set
			{
				this.SetBoolean(LocationsSchema.IsDefault.FieldName, value);
			}
		}

		public override string TableName
		{
			get { return "Locations"; }
		}
		
		#endregion		
		
		#region String Properties
	
		public virtual string s_Id
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.Id.FieldName) ? string.Empty : base.GetIntegerAsString(LocationsSchema.Id.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.Id.FieldName);
				else
					this.Id = base.SetIntegerAsString(LocationsSchema.Id.FieldName, value);
			}
		}

		public virtual string s_DId
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.DId.FieldName) ? string.Empty : base.GetIntegerAsString(LocationsSchema.DId.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.DId.FieldName);
				else
					this.DId = base.SetIntegerAsString(LocationsSchema.DId.FieldName, value);
			}
		}

		public virtual string s_ParentId
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.ParentId.FieldName) ? string.Empty : base.GetIntegerAsString(LocationsSchema.ParentId.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.ParentId.FieldName);
				else
					this.ParentId = base.SetIntegerAsString(LocationsSchema.ParentId.FieldName, value);
			}
		}

		public virtual string s_AccountId
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.AccountId.FieldName) ? string.Empty : base.GetIntegerAsString(LocationsSchema.AccountId.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.AccountId.FieldName);
				else
					this.AccountId = base.SetIntegerAsString(LocationsSchema.AccountId.FieldName, value);
			}
		}

		public virtual string s_LocationTypeId
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.LocationTypeId.FieldName) ? string.Empty : base.GetIntegerAsString(LocationsSchema.LocationTypeId.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.LocationTypeId.FieldName);
				else
					this.LocationTypeId = base.SetIntegerAsString(LocationsSchema.LocationTypeId.FieldName, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.Name.FieldName) ? string.Empty : base.GetStringAsString(LocationsSchema.Name.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.Name.FieldName);
				else
					this.Name = base.SetStringAsString(LocationsSchema.Name.FieldName, value);
			}
		}

		public virtual string s_Inactive
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.Inactive.FieldName) ? string.Empty : base.GetBooleanAsString(LocationsSchema.Inactive.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.Inactive.FieldName);
				else
					this.Inactive = base.SetBooleanAsString(LocationsSchema.Inactive.FieldName, value);
			}
		}

		public virtual string s_Country
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.Country.FieldName) ? string.Empty : base.GetStringAsString(LocationsSchema.Country.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.Country.FieldName);
				else
					this.Country = base.SetStringAsString(LocationsSchema.Country.FieldName, value);
			}
		}

		public virtual string s_State
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.State.FieldName) ? string.Empty : base.GetStringAsString(LocationsSchema.State.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.State.FieldName);
				else
					this.State = base.SetStringAsString(LocationsSchema.State.FieldName, value);
			}
		}

		public virtual string s_City
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.City.FieldName) ? string.Empty : base.GetStringAsString(LocationsSchema.City.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.City.FieldName);
				else
					this.City = base.SetStringAsString(LocationsSchema.City.FieldName, value);
			}
		}

		public virtual string s_Address1
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.Address1.FieldName) ? string.Empty : base.GetStringAsString(LocationsSchema.Address1.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.Address1.FieldName);
				else
					this.Address1 = base.SetStringAsString(LocationsSchema.Address1.FieldName, value);
			}
		}

		public virtual string s_Address2
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.Address2.FieldName) ? string.Empty : base.GetStringAsString(LocationsSchema.Address2.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.Address2.FieldName);
				else
					this.Address2 = base.SetStringAsString(LocationsSchema.Address2.FieldName, value);
			}
		}

		public virtual string s_ZipCode
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.ZipCode.FieldName) ? string.Empty : base.GetStringAsString(LocationsSchema.ZipCode.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.ZipCode.FieldName);
				else
					this.ZipCode = base.SetStringAsString(LocationsSchema.ZipCode.FieldName, value);
			}
		}

		public virtual string s_Phone1
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.Phone1.FieldName) ? string.Empty : base.GetStringAsString(LocationsSchema.Phone1.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.Phone1.FieldName);
				else
					this.Phone1 = base.SetStringAsString(LocationsSchema.Phone1.FieldName, value);
			}
		}

		public virtual string s_Phone2
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.Phone2.FieldName) ? string.Empty : base.GetStringAsString(LocationsSchema.Phone2.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.Phone2.FieldName);
				else
					this.Phone2 = base.SetStringAsString(LocationsSchema.Phone2.FieldName, value);
			}
		}

		public virtual string s_WorkPlaces
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.WorkPlaces.FieldName) ? string.Empty : base.GetIntegerAsString(LocationsSchema.WorkPlaces.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.WorkPlaces.FieldName);
				else
					this.WorkPlaces = base.SetIntegerAsString(LocationsSchema.WorkPlaces.FieldName, value);
			}
		}

		public virtual string s_RoomNumber
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.RoomNumber.FieldName) ? string.Empty : base.GetStringAsString(LocationsSchema.RoomNumber.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.RoomNumber.FieldName);
				else
					this.RoomNumber = base.SetStringAsString(LocationsSchema.RoomNumber.FieldName, value);
			}
		}

		public virtual string s_RoomSize
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.RoomSize.FieldName) ? string.Empty : base.GetDecimalAsString(LocationsSchema.RoomSize.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.RoomSize.FieldName);
				else
					this.RoomSize = base.SetDecimalAsString(LocationsSchema.RoomSize.FieldName, value);
			}
		}

		public virtual string s_Description
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.Description.FieldName) ? string.Empty : base.GetStringAsString(LocationsSchema.Description.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.Description.FieldName);
				else
					this.Description = base.SetStringAsString(LocationsSchema.Description.FieldName, value);
			}
		}

		public virtual string s_IsDefault
	    {
			get
	        {
				return this.IsColumnNull(LocationsSchema.IsDefault.FieldName) ? string.Empty : base.GetBooleanAsString(LocationsSchema.IsDefault.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(LocationsSchema.IsDefault.FieldName);
				else
					this.IsDefault = base.SetBooleanAsString(LocationsSchema.IsDefault.FieldName, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Id
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.Id);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter DId
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.DId);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ParentId
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.ParentId);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter AccountId
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.AccountId);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter LocationTypeId
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.LocationTypeId);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.Name);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Inactive
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.Inactive);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Country
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.Country);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter State
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.State);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter City
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.City);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Address1
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.Address1);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Address2
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.Address2);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ZipCode
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.ZipCode);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Phone1
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.Phone1);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Phone2
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.Phone2);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter WorkPlaces
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.WorkPlaces);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter RoomNumber
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.RoomNumber);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter RoomSize
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.RoomSize);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Description
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.Description);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter IsDefault
				{
					get
					{
							WhereParameter wp = new WhereParameter(LocationsSchema.IsDefault);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public WhereParameter DId
		    {
				get
		        {
					if(_DId_W == null)
	        	    {
						_DId_W = TearOff.DId;
					}
					return _DId_W;
				}
			}

			public WhereParameter ParentId
		    {
				get
		        {
					if(_ParentId_W == null)
	        	    {
						_ParentId_W = TearOff.ParentId;
					}
					return _ParentId_W;
				}
			}

			public WhereParameter AccountId
		    {
				get
		        {
					if(_AccountId_W == null)
	        	    {
						_AccountId_W = TearOff.AccountId;
					}
					return _AccountId_W;
				}
			}

			public WhereParameter LocationTypeId
		    {
				get
		        {
					if(_LocationTypeId_W == null)
	        	    {
						_LocationTypeId_W = TearOff.LocationTypeId;
					}
					return _LocationTypeId_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter Inactive
		    {
				get
		        {
					if(_Inactive_W == null)
	        	    {
						_Inactive_W = TearOff.Inactive;
					}
					return _Inactive_W;
				}
			}

			public WhereParameter Country
		    {
				get
		        {
					if(_Country_W == null)
	        	    {
						_Country_W = TearOff.Country;
					}
					return _Country_W;
				}
			}

			public WhereParameter State
		    {
				get
		        {
					if(_State_W == null)
	        	    {
						_State_W = TearOff.State;
					}
					return _State_W;
				}
			}

			public WhereParameter City
		    {
				get
		        {
					if(_City_W == null)
	        	    {
						_City_W = TearOff.City;
					}
					return _City_W;
				}
			}

			public WhereParameter Address1
		    {
				get
		        {
					if(_Address1_W == null)
	        	    {
						_Address1_W = TearOff.Address1;
					}
					return _Address1_W;
				}
			}

			public WhereParameter Address2
		    {
				get
		        {
					if(_Address2_W == null)
	        	    {
						_Address2_W = TearOff.Address2;
					}
					return _Address2_W;
				}
			}

			public WhereParameter ZipCode
		    {
				get
		        {
					if(_ZipCode_W == null)
	        	    {
						_ZipCode_W = TearOff.ZipCode;
					}
					return _ZipCode_W;
				}
			}

			public WhereParameter Phone1
		    {
				get
		        {
					if(_Phone1_W == null)
	        	    {
						_Phone1_W = TearOff.Phone1;
					}
					return _Phone1_W;
				}
			}

			public WhereParameter Phone2
		    {
				get
		        {
					if(_Phone2_W == null)
	        	    {
						_Phone2_W = TearOff.Phone2;
					}
					return _Phone2_W;
				}
			}

			public WhereParameter WorkPlaces
		    {
				get
		        {
					if(_WorkPlaces_W == null)
	        	    {
						_WorkPlaces_W = TearOff.WorkPlaces;
					}
					return _WorkPlaces_W;
				}
			}

			public WhereParameter RoomNumber
		    {
				get
		        {
					if(_RoomNumber_W == null)
	        	    {
						_RoomNumber_W = TearOff.RoomNumber;
					}
					return _RoomNumber_W;
				}
			}

			public WhereParameter RoomSize
		    {
				get
		        {
					if(_RoomSize_W == null)
	        	    {
						_RoomSize_W = TearOff.RoomSize;
					}
					return _RoomSize_W;
				}
			}

			public WhereParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public WhereParameter IsDefault
		    {
				get
		        {
					if(_IsDefault_W == null)
	        	    {
						_IsDefault_W = TearOff.IsDefault;
					}
					return _IsDefault_W;
				}
			}

			private WhereParameter _Id_W = null;
			private WhereParameter _DId_W = null;
			private WhereParameter _ParentId_W = null;
			private WhereParameter _AccountId_W = null;
			private WhereParameter _LocationTypeId_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _Inactive_W = null;
			private WhereParameter _Country_W = null;
			private WhereParameter _State_W = null;
			private WhereParameter _City_W = null;
			private WhereParameter _Address1_W = null;
			private WhereParameter _Address2_W = null;
			private WhereParameter _ZipCode_W = null;
			private WhereParameter _Phone1_W = null;
			private WhereParameter _Phone2_W = null;
			private WhereParameter _WorkPlaces_W = null;
			private WhereParameter _RoomNumber_W = null;
			private WhereParameter _RoomSize_W = null;
			private WhereParameter _Description_W = null;
			private WhereParameter _IsDefault_W = null;

			public void WhereClauseReset()
			{
				_Id_W = null;
				_DId_W = null;
				_ParentId_W = null;
				_AccountId_W = null;
				_LocationTypeId_W = null;
				_Name_W = null;
				_Inactive_W = null;
				_Country_W = null;
				_State_W = null;
				_City_W = null;
				_Address1_W = null;
				_Address2_W = null;
				_ZipCode_W = null;
				_Phone1_W = null;
				_Phone2_W = null;
				_WorkPlaces_W = null;
				_RoomNumber_W = null;
				_RoomSize_W = null;
				_Description_W = null;
				_IsDefault_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Id
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.Id);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter DId
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.DId);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ParentId
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.ParentId);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter AccountId
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.AccountId);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter LocationTypeId
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.LocationTypeId);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.Name);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Inactive
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.Inactive);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Country
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.Country);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter State
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.State);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter City
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.City);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Address1
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.Address1);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Address2
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.Address2);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ZipCode
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.ZipCode);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Phone1
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.Phone1);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Phone2
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.Phone2);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter WorkPlaces
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.WorkPlaces);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter RoomNumber
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.RoomNumber);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter RoomSize
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.RoomSize);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Description
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.Description);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter IsDefault
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(LocationsSchema.IsDefault);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public AggregateParameter DId
		    {
				get
		        {
					if(_DId_W == null)
	        	    {
						_DId_W = TearOff.DId;
					}
					return _DId_W;
				}
			}

			public AggregateParameter ParentId
		    {
				get
		        {
					if(_ParentId_W == null)
	        	    {
						_ParentId_W = TearOff.ParentId;
					}
					return _ParentId_W;
				}
			}

			public AggregateParameter AccountId
		    {
				get
		        {
					if(_AccountId_W == null)
	        	    {
						_AccountId_W = TearOff.AccountId;
					}
					return _AccountId_W;
				}
			}

			public AggregateParameter LocationTypeId
		    {
				get
		        {
					if(_LocationTypeId_W == null)
	        	    {
						_LocationTypeId_W = TearOff.LocationTypeId;
					}
					return _LocationTypeId_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter Inactive
		    {
				get
		        {
					if(_Inactive_W == null)
	        	    {
						_Inactive_W = TearOff.Inactive;
					}
					return _Inactive_W;
				}
			}

			public AggregateParameter Country
		    {
				get
		        {
					if(_Country_W == null)
	        	    {
						_Country_W = TearOff.Country;
					}
					return _Country_W;
				}
			}

			public AggregateParameter State
		    {
				get
		        {
					if(_State_W == null)
	        	    {
						_State_W = TearOff.State;
					}
					return _State_W;
				}
			}

			public AggregateParameter City
		    {
				get
		        {
					if(_City_W == null)
	        	    {
						_City_W = TearOff.City;
					}
					return _City_W;
				}
			}

			public AggregateParameter Address1
		    {
				get
		        {
					if(_Address1_W == null)
	        	    {
						_Address1_W = TearOff.Address1;
					}
					return _Address1_W;
				}
			}

			public AggregateParameter Address2
		    {
				get
		        {
					if(_Address2_W == null)
	        	    {
						_Address2_W = TearOff.Address2;
					}
					return _Address2_W;
				}
			}

			public AggregateParameter ZipCode
		    {
				get
		        {
					if(_ZipCode_W == null)
	        	    {
						_ZipCode_W = TearOff.ZipCode;
					}
					return _ZipCode_W;
				}
			}

			public AggregateParameter Phone1
		    {
				get
		        {
					if(_Phone1_W == null)
	        	    {
						_Phone1_W = TearOff.Phone1;
					}
					return _Phone1_W;
				}
			}

			public AggregateParameter Phone2
		    {
				get
		        {
					if(_Phone2_W == null)
	        	    {
						_Phone2_W = TearOff.Phone2;
					}
					return _Phone2_W;
				}
			}

			public AggregateParameter WorkPlaces
		    {
				get
		        {
					if(_WorkPlaces_W == null)
	        	    {
						_WorkPlaces_W = TearOff.WorkPlaces;
					}
					return _WorkPlaces_W;
				}
			}

			public AggregateParameter RoomNumber
		    {
				get
		        {
					if(_RoomNumber_W == null)
	        	    {
						_RoomNumber_W = TearOff.RoomNumber;
					}
					return _RoomNumber_W;
				}
			}

			public AggregateParameter RoomSize
		    {
				get
		        {
					if(_RoomSize_W == null)
	        	    {
						_RoomSize_W = TearOff.RoomSize;
					}
					return _RoomSize_W;
				}
			}

			public AggregateParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public AggregateParameter IsDefault
		    {
				get
		        {
					if(_IsDefault_W == null)
	        	    {
						_IsDefault_W = TearOff.IsDefault;
					}
					return _IsDefault_W;
				}
			}

			private AggregateParameter _Id_W = null;
			private AggregateParameter _DId_W = null;
			private AggregateParameter _ParentId_W = null;
			private AggregateParameter _AccountId_W = null;
			private AggregateParameter _LocationTypeId_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _Inactive_W = null;
			private AggregateParameter _Country_W = null;
			private AggregateParameter _State_W = null;
			private AggregateParameter _City_W = null;
			private AggregateParameter _Address1_W = null;
			private AggregateParameter _Address2_W = null;
			private AggregateParameter _ZipCode_W = null;
			private AggregateParameter _Phone1_W = null;
			private AggregateParameter _Phone2_W = null;
			private AggregateParameter _WorkPlaces_W = null;
			private AggregateParameter _RoomNumber_W = null;
			private AggregateParameter _RoomSize_W = null;
			private AggregateParameter _Description_W = null;
			private AggregateParameter _IsDefault_W = null;

			public void AggregateClauseReset()
			{
				_Id_W = null;
				_DId_W = null;
				_ParentId_W = null;
				_AccountId_W = null;
				_LocationTypeId_W = null;
				_Name_W = null;
				_Inactive_W = null;
				_Country_W = null;
				_State_W = null;
				_City_W = null;
				_Address1_W = null;
				_Address2_W = null;
				_ZipCode_W = null;
				_Phone1_W = null;
				_Phone2_W = null;
				_WorkPlaces_W = null;
				_RoomNumber_W = null;
				_RoomSize_W = null;
				_Description_W = null;
				_IsDefault_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	}
}
