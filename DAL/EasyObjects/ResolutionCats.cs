/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.Common;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace BWA.bigWebDesk.DAL
{

	#region Schema

	public class ResolutionCatsSchema : NCI.EasyObjects.Schema
	{
		private static ArrayList _entries;
		public static SchemaItem Id = new SchemaItem("Id", DbType.Int32, true, false, false, true, true, false);
		public static SchemaItem DId = new SchemaItem("DId", DbType.Int32, false, false, false, true, true, false);
		public static SchemaItem BtInactive = new SchemaItem("btInactive", DbType.Boolean, false, false, false, false, false, true);
		public static SchemaItem IntCreated = new SchemaItem("intCreated", DbType.Int32, false, false, false, false, false, false);
		public static SchemaItem DtCreated = new SchemaItem("dtCreated", DbType.DateTime, false, false, false, false, false, false);
		public static SchemaItem IntUpdatedBy = new SchemaItem("intUpdatedBy", DbType.Int32, false, true, false, false, true, false);
		public static SchemaItem DtUpdated = new SchemaItem("dtUpdated", DbType.DateTime, false, true, false, false, false, false);
		public static SchemaItem VchName = new SchemaItem("vchName", DbType.AnsiString, SchemaItemJustify.None, 50, false, false, false, false);
		public static SchemaItem ParentId = new SchemaItem("ParentId", DbType.Int32, false, true, false, false, true, false);
		public static SchemaItem BtResolved = new SchemaItem("btResolved", DbType.Boolean, false, false, false, false, false, true);

		public override ArrayList SchemaEntries
		{
			get
			{
				if (_entries == null )
				{
					_entries = new ArrayList();
					_entries.Add(ResolutionCatsSchema.Id);
					_entries.Add(ResolutionCatsSchema.DId);
					_entries.Add(ResolutionCatsSchema.BtInactive);
					_entries.Add(ResolutionCatsSchema.IntCreated);
					_entries.Add(ResolutionCatsSchema.DtCreated);
					_entries.Add(ResolutionCatsSchema.IntUpdatedBy);
					_entries.Add(ResolutionCatsSchema.DtUpdated);
					_entries.Add(ResolutionCatsSchema.VchName);
					_entries.Add(ResolutionCatsSchema.ParentId);
					_entries.Add(ResolutionCatsSchema.BtResolved);
				}
				return _entries;
			}
		}
	}
	#endregion

	public abstract class ResolutionCats : EasyObject
	{

		public ResolutionCats()
		{
			ResolutionCatsSchema _schema = new ResolutionCatsSchema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "dbo";
		}
		
		public override void FlushData() 	 
		{ 	 
			this._whereClause = null; 	 
			this._aggregateClause = null; 	 
			base.FlushData(); 	 
		}
			   
		/// <summary>
		/// Loads the business object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="Id"></param>
		/// <param name="DId"></param>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadByPrimaryKey(int Id, int DId)
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					ListDictionary parameters = new ListDictionary();

					// Add in parameters
					parameters.Add(ResolutionCatsSchema.Id.FieldName, Id);
					parameters.Add(ResolutionCatsSchema.DId.FieldName, DId);

					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "GetResolutionCats", parameters, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.Id.Value = Id;
					this.Where.DId.Value = DId;
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}
	
		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll()
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "GetAllResolutionCats", null, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		/// <summary>
		/// Adds a new record to the internal table.
		/// </summary>
		public override void AddNew()
		{
			base.AddNew();
		}

		protected override DbCommand GetInsertCommand(CommandType commandType)
		{	
			DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "AddResolutionCats";
					dbCommand = db.GetStoredProcCommand(sqlCommand);

					db.AddParameter(dbCommand, "Id", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "Id", DataRowVersion.Default, Convert.DBNull);
					CreateParameters(db, dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddInsertColumn(item);
						}
					}
					dbCommand = this.Query.GetInsertCommandWrapper();

					dbCommand.Parameters.Clear();
					CreateParameters(db, dbCommand);
					db.AddParameter(dbCommand, "Id", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "Id", DataRowVersion.Default, Convert.DBNull);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetUpdateCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "UpdateResolutionCats";
					dbCommand = db.GetStoredProcCommand(sqlCommand);

					db.AddInParameter(dbCommand, "Id", DbType.Int32, "Id", DataRowVersion.Current);
					CreateParameters(db, dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddUpdateColumn(item);
						}
					}

					this.Where.WhereClauseReset();
					this.Where.Id.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetUpdateCommandWrapper();

					dbCommand.Parameters.Clear();
					CreateParameters(db, dbCommand);
					db.AddInParameter(dbCommand, "Id", DbType.Int32, "Id", DataRowVersion.Current);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetDeleteCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "DeleteResolutionCats";
					dbCommand = db.GetStoredProcCommand(sqlCommand);
					db.AddInParameter(dbCommand, "Id", DbType.Int32, "Id", DataRowVersion.Current);
					db.AddInParameter(dbCommand, "DId", DbType.Int32, "DId", DataRowVersion.Current);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.Id.Operator = WhereParameter.Operand.Equal;
					this.Where.DId.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetDeleteCommandWrapper();

					dbCommand.Parameters.Clear();
					db.AddInParameter(dbCommand, "Id", DbType.Int32, "Id", DataRowVersion.Current);
					db.AddInParameter(dbCommand, "DId", DbType.Int32, "DId", DataRowVersion.Current);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		private void CreateParameters(Database db, DbCommand dbCommand)
		{
			db.AddInParameter(dbCommand, "DId", DbType.Int32, "DId", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "btInactive", DbType.Boolean, "btInactive", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "intCreated", DbType.Int32, "intCreated", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "dtCreated", DbType.DateTime, "dtCreated", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "intUpdatedBy", DbType.Int32, "intUpdatedBy", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "dtUpdated", DbType.DateTime, "dtUpdated", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "vchName", DbType.AnsiString, "vchName", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ParentId", DbType.Int32, "ParentId", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "btResolved", DbType.Boolean, "btResolved", DataRowVersion.Current);
		}
		
		#region Properties
		public virtual int Id
		{
			get
			{
				return this.GetInteger(ResolutionCatsSchema.Id.FieldName);
	    	}
			set
			{
				this.SetInteger(ResolutionCatsSchema.Id.FieldName, value);
			}
		}
		public virtual int DId
		{
			get
			{
				return this.GetInteger(ResolutionCatsSchema.DId.FieldName);
	    	}
			set
			{
				this.SetInteger(ResolutionCatsSchema.DId.FieldName, value);
			}
		}
		public virtual bool BtInactive
		{
			get
			{
				return this.GetBoolean(ResolutionCatsSchema.BtInactive.FieldName);
	    	}
			set
			{
				this.SetBoolean(ResolutionCatsSchema.BtInactive.FieldName, value);
			}
		}
		public virtual int IntCreated
		{
			get
			{
				return this.GetInteger(ResolutionCatsSchema.IntCreated.FieldName);
	    	}
			set
			{
				this.SetInteger(ResolutionCatsSchema.IntCreated.FieldName, value);
			}
		}
		public virtual DateTime DtCreated
		{
			get
			{
				return this.GetDateTime(ResolutionCatsSchema.DtCreated.FieldName);
	    	}
			set
			{
				this.SetDateTime(ResolutionCatsSchema.DtCreated.FieldName, value);
			}
		}
		public virtual int IntUpdatedBy
		{
			get
			{
				return this.GetInteger(ResolutionCatsSchema.IntUpdatedBy.FieldName);
	    	}
			set
			{
				this.SetInteger(ResolutionCatsSchema.IntUpdatedBy.FieldName, value);
			}
		}
		public virtual DateTime DtUpdated
		{
			get
			{
				return this.GetDateTime(ResolutionCatsSchema.DtUpdated.FieldName);
	    	}
			set
			{
				this.SetDateTime(ResolutionCatsSchema.DtUpdated.FieldName, value);
			}
		}
		public virtual string VchName
		{
			get
			{
				return this.GetString(ResolutionCatsSchema.VchName.FieldName);
	    	}
			set
			{
				this.SetString(ResolutionCatsSchema.VchName.FieldName, value);
			}
		}
		public virtual int ParentId
		{
			get
			{
				return this.GetInteger(ResolutionCatsSchema.ParentId.FieldName);
	    	}
			set
			{
				this.SetInteger(ResolutionCatsSchema.ParentId.FieldName, value);
			}
		}
		public virtual bool BtResolved
		{
			get
			{
				return this.GetBoolean(ResolutionCatsSchema.BtResolved.FieldName);
	    	}
			set
			{
				this.SetBoolean(ResolutionCatsSchema.BtResolved.FieldName, value);
			}
		}

		public override string TableName
		{
			get { return "ResolutionCats"; }
		}
		
		#endregion		
		
		#region String Properties
	
		public virtual string s_Id
	    {
			get
	        {
				return this.IsColumnNull(ResolutionCatsSchema.Id.FieldName) ? string.Empty : base.GetIntegerAsString(ResolutionCatsSchema.Id.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ResolutionCatsSchema.Id.FieldName);
				else
					this.Id = base.SetIntegerAsString(ResolutionCatsSchema.Id.FieldName, value);
			}
		}

		public virtual string s_DId
	    {
			get
	        {
				return this.IsColumnNull(ResolutionCatsSchema.DId.FieldName) ? string.Empty : base.GetIntegerAsString(ResolutionCatsSchema.DId.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ResolutionCatsSchema.DId.FieldName);
				else
					this.DId = base.SetIntegerAsString(ResolutionCatsSchema.DId.FieldName, value);
			}
		}

		public virtual string s_BtInactive
	    {
			get
	        {
				return this.IsColumnNull(ResolutionCatsSchema.BtInactive.FieldName) ? string.Empty : base.GetBooleanAsString(ResolutionCatsSchema.BtInactive.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ResolutionCatsSchema.BtInactive.FieldName);
				else
					this.BtInactive = base.SetBooleanAsString(ResolutionCatsSchema.BtInactive.FieldName, value);
			}
		}

		public virtual string s_IntCreated
	    {
			get
	        {
				return this.IsColumnNull(ResolutionCatsSchema.IntCreated.FieldName) ? string.Empty : base.GetIntegerAsString(ResolutionCatsSchema.IntCreated.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ResolutionCatsSchema.IntCreated.FieldName);
				else
					this.IntCreated = base.SetIntegerAsString(ResolutionCatsSchema.IntCreated.FieldName, value);
			}
		}

		public virtual string s_DtCreated
	    {
			get
	        {
				return this.IsColumnNull(ResolutionCatsSchema.DtCreated.FieldName) ? string.Empty : base.GetDateTimeAsString(ResolutionCatsSchema.DtCreated.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ResolutionCatsSchema.DtCreated.FieldName);
				else
					this.DtCreated = base.SetDateTimeAsString(ResolutionCatsSchema.DtCreated.FieldName, value);
			}
		}

		public virtual string s_IntUpdatedBy
	    {
			get
	        {
				return this.IsColumnNull(ResolutionCatsSchema.IntUpdatedBy.FieldName) ? string.Empty : base.GetIntegerAsString(ResolutionCatsSchema.IntUpdatedBy.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ResolutionCatsSchema.IntUpdatedBy.FieldName);
				else
					this.IntUpdatedBy = base.SetIntegerAsString(ResolutionCatsSchema.IntUpdatedBy.FieldName, value);
			}
		}

		public virtual string s_DtUpdated
	    {
			get
	        {
				return this.IsColumnNull(ResolutionCatsSchema.DtUpdated.FieldName) ? string.Empty : base.GetDateTimeAsString(ResolutionCatsSchema.DtUpdated.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ResolutionCatsSchema.DtUpdated.FieldName);
				else
					this.DtUpdated = base.SetDateTimeAsString(ResolutionCatsSchema.DtUpdated.FieldName, value);
			}
		}

		public virtual string s_VchName
	    {
			get
	        {
				return this.IsColumnNull(ResolutionCatsSchema.VchName.FieldName) ? string.Empty : base.GetStringAsString(ResolutionCatsSchema.VchName.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ResolutionCatsSchema.VchName.FieldName);
				else
					this.VchName = base.SetStringAsString(ResolutionCatsSchema.VchName.FieldName, value);
			}
		}

		public virtual string s_ParentId
	    {
			get
	        {
				return this.IsColumnNull(ResolutionCatsSchema.ParentId.FieldName) ? string.Empty : base.GetIntegerAsString(ResolutionCatsSchema.ParentId.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ResolutionCatsSchema.ParentId.FieldName);
				else
					this.ParentId = base.SetIntegerAsString(ResolutionCatsSchema.ParentId.FieldName, value);
			}
		}

		public virtual string s_BtResolved
	    {
			get
	        {
				return this.IsColumnNull(ResolutionCatsSchema.BtResolved.FieldName) ? string.Empty : base.GetBooleanAsString(ResolutionCatsSchema.BtResolved.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ResolutionCatsSchema.BtResolved.FieldName);
				else
					this.BtResolved = base.SetBooleanAsString(ResolutionCatsSchema.BtResolved.FieldName, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Id
				{
					get
					{
							WhereParameter wp = new WhereParameter(ResolutionCatsSchema.Id);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter DId
				{
					get
					{
							WhereParameter wp = new WhereParameter(ResolutionCatsSchema.DId);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter BtInactive
				{
					get
					{
							WhereParameter wp = new WhereParameter(ResolutionCatsSchema.BtInactive);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter IntCreated
				{
					get
					{
							WhereParameter wp = new WhereParameter(ResolutionCatsSchema.IntCreated);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter DtCreated
				{
					get
					{
							WhereParameter wp = new WhereParameter(ResolutionCatsSchema.DtCreated);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter IntUpdatedBy
				{
					get
					{
							WhereParameter wp = new WhereParameter(ResolutionCatsSchema.IntUpdatedBy);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter DtUpdated
				{
					get
					{
							WhereParameter wp = new WhereParameter(ResolutionCatsSchema.DtUpdated);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter VchName
				{
					get
					{
							WhereParameter wp = new WhereParameter(ResolutionCatsSchema.VchName);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ParentId
				{
					get
					{
							WhereParameter wp = new WhereParameter(ResolutionCatsSchema.ParentId);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter BtResolved
				{
					get
					{
							WhereParameter wp = new WhereParameter(ResolutionCatsSchema.BtResolved);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public WhereParameter DId
		    {
				get
		        {
					if(_DId_W == null)
	        	    {
						_DId_W = TearOff.DId;
					}
					return _DId_W;
				}
			}

			public WhereParameter BtInactive
		    {
				get
		        {
					if(_BtInactive_W == null)
	        	    {
						_BtInactive_W = TearOff.BtInactive;
					}
					return _BtInactive_W;
				}
			}

			public WhereParameter IntCreated
		    {
				get
		        {
					if(_IntCreated_W == null)
	        	    {
						_IntCreated_W = TearOff.IntCreated;
					}
					return _IntCreated_W;
				}
			}

			public WhereParameter DtCreated
		    {
				get
		        {
					if(_DtCreated_W == null)
	        	    {
						_DtCreated_W = TearOff.DtCreated;
					}
					return _DtCreated_W;
				}
			}

			public WhereParameter IntUpdatedBy
		    {
				get
		        {
					if(_IntUpdatedBy_W == null)
	        	    {
						_IntUpdatedBy_W = TearOff.IntUpdatedBy;
					}
					return _IntUpdatedBy_W;
				}
			}

			public WhereParameter DtUpdated
		    {
				get
		        {
					if(_DtUpdated_W == null)
	        	    {
						_DtUpdated_W = TearOff.DtUpdated;
					}
					return _DtUpdated_W;
				}
			}

			public WhereParameter VchName
		    {
				get
		        {
					if(_VchName_W == null)
	        	    {
						_VchName_W = TearOff.VchName;
					}
					return _VchName_W;
				}
			}

			public WhereParameter ParentId
		    {
				get
		        {
					if(_ParentId_W == null)
	        	    {
						_ParentId_W = TearOff.ParentId;
					}
					return _ParentId_W;
				}
			}

			public WhereParameter BtResolved
		    {
				get
		        {
					if(_BtResolved_W == null)
	        	    {
						_BtResolved_W = TearOff.BtResolved;
					}
					return _BtResolved_W;
				}
			}

			private WhereParameter _Id_W = null;
			private WhereParameter _DId_W = null;
			private WhereParameter _BtInactive_W = null;
			private WhereParameter _IntCreated_W = null;
			private WhereParameter _DtCreated_W = null;
			private WhereParameter _IntUpdatedBy_W = null;
			private WhereParameter _DtUpdated_W = null;
			private WhereParameter _VchName_W = null;
			private WhereParameter _ParentId_W = null;
			private WhereParameter _BtResolved_W = null;

			public void WhereClauseReset()
			{
				_Id_W = null;
				_DId_W = null;
				_BtInactive_W = null;
				_IntCreated_W = null;
				_DtCreated_W = null;
				_IntUpdatedBy_W = null;
				_DtUpdated_W = null;
				_VchName_W = null;
				_ParentId_W = null;
				_BtResolved_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Id
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(ResolutionCatsSchema.Id);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter DId
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(ResolutionCatsSchema.DId);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter BtInactive
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(ResolutionCatsSchema.BtInactive);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter IntCreated
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(ResolutionCatsSchema.IntCreated);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter DtCreated
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(ResolutionCatsSchema.DtCreated);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter IntUpdatedBy
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(ResolutionCatsSchema.IntUpdatedBy);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter DtUpdated
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(ResolutionCatsSchema.DtUpdated);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter VchName
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(ResolutionCatsSchema.VchName);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ParentId
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(ResolutionCatsSchema.ParentId);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter BtResolved
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(ResolutionCatsSchema.BtResolved);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public AggregateParameter DId
		    {
				get
		        {
					if(_DId_W == null)
	        	    {
						_DId_W = TearOff.DId;
					}
					return _DId_W;
				}
			}

			public AggregateParameter BtInactive
		    {
				get
		        {
					if(_BtInactive_W == null)
	        	    {
						_BtInactive_W = TearOff.BtInactive;
					}
					return _BtInactive_W;
				}
			}

			public AggregateParameter IntCreated
		    {
				get
		        {
					if(_IntCreated_W == null)
	        	    {
						_IntCreated_W = TearOff.IntCreated;
					}
					return _IntCreated_W;
				}
			}

			public AggregateParameter DtCreated
		    {
				get
		        {
					if(_DtCreated_W == null)
	        	    {
						_DtCreated_W = TearOff.DtCreated;
					}
					return _DtCreated_W;
				}
			}

			public AggregateParameter IntUpdatedBy
		    {
				get
		        {
					if(_IntUpdatedBy_W == null)
	        	    {
						_IntUpdatedBy_W = TearOff.IntUpdatedBy;
					}
					return _IntUpdatedBy_W;
				}
			}

			public AggregateParameter DtUpdated
		    {
				get
		        {
					if(_DtUpdated_W == null)
	        	    {
						_DtUpdated_W = TearOff.DtUpdated;
					}
					return _DtUpdated_W;
				}
			}

			public AggregateParameter VchName
		    {
				get
		        {
					if(_VchName_W == null)
	        	    {
						_VchName_W = TearOff.VchName;
					}
					return _VchName_W;
				}
			}

			public AggregateParameter ParentId
		    {
				get
		        {
					if(_ParentId_W == null)
	        	    {
						_ParentId_W = TearOff.ParentId;
					}
					return _ParentId_W;
				}
			}

			public AggregateParameter BtResolved
		    {
				get
		        {
					if(_BtResolved_W == null)
	        	    {
						_BtResolved_W = TearOff.BtResolved;
					}
					return _BtResolved_W;
				}
			}

			private AggregateParameter _Id_W = null;
			private AggregateParameter _DId_W = null;
			private AggregateParameter _BtInactive_W = null;
			private AggregateParameter _IntCreated_W = null;
			private AggregateParameter _DtCreated_W = null;
			private AggregateParameter _IntUpdatedBy_W = null;
			private AggregateParameter _DtUpdated_W = null;
			private AggregateParameter _VchName_W = null;
			private AggregateParameter _ParentId_W = null;
			private AggregateParameter _BtResolved_W = null;

			public void AggregateClauseReset()
			{
				_Id_W = null;
				_DId_W = null;
				_BtInactive_W = null;
				_IntCreated_W = null;
				_DtCreated_W = null;
				_IntUpdatedBy_W = null;
				_DtUpdated_W = null;
				_VchName_W = null;
				_ParentId_W = null;
				_BtResolved_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	}
}
