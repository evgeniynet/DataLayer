/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.Common;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace BWA.bigWebDesk.DAL
{

	#region Schema

	public class tbl_classSchema : NCI.EasyObjects.Schema
	{
		private static ArrayList _entries;
		public static SchemaItem Id = new SchemaItem("id", DbType.Int32, true, false, false, true, true, false);
		public static SchemaItem Company_id = new SchemaItem("company_id", DbType.Int32, false, false, false, true, true, false);
		public static SchemaItem Name = new SchemaItem("Name", DbType.AnsiString, SchemaItemJustify.None, 50, false, false, false, false);
		public static SchemaItem LastResortTechId = new SchemaItem("LastResortTechId", DbType.Int32, false, false, false, false, true, false);
		public static SchemaItem ConfigDistributedRouting = new SchemaItem("ConfigDistributedRouting", DbType.Byte, false, false, false, false, false, true);
		public static SchemaItem TintClassType = new SchemaItem("tintClassType", DbType.Byte, false, false, false, false, false, true);
		public static SchemaItem BitRestrictToTechs = new SchemaItem("bitRestrictToTechs", DbType.Boolean, false, false, false, false, false, true);
		public static SchemaItem TxtDesc = new SchemaItem("txtDesc", DbType.AnsiString, SchemaItemJustify.None, 2147483647, true, false, false, false);
		public static SchemaItem BitAllowEmailParsing = new SchemaItem("bitAllowEmailParsing", DbType.Boolean, false, false, false, false, false, true);
		public static SchemaItem IntPriorityId = new SchemaItem("intPriorityId", DbType.Int32, false, true, false, false, true, false);
		public static SchemaItem TintLevelOverride = new SchemaItem("tintLevelOverride", DbType.Byte, false, true, false, false, false, false);
		public static SchemaItem BtInactive = new SchemaItem("btInactive", DbType.Boolean, false, false, false, false, false, true);
		public static SchemaItem ParentId = new SchemaItem("ParentId", DbType.Int32, false, true, false, false, true, false);

		public override ArrayList SchemaEntries
		{
			get
			{
				if (_entries == null )
				{
					_entries = new ArrayList();
					_entries.Add(tbl_classSchema.Id);
					_entries.Add(tbl_classSchema.Company_id);
					_entries.Add(tbl_classSchema.Name);
					_entries.Add(tbl_classSchema.LastResortTechId);
					_entries.Add(tbl_classSchema.ConfigDistributedRouting);
					_entries.Add(tbl_classSchema.TintClassType);
					_entries.Add(tbl_classSchema.BitRestrictToTechs);
					_entries.Add(tbl_classSchema.TxtDesc);
					_entries.Add(tbl_classSchema.BitAllowEmailParsing);
					_entries.Add(tbl_classSchema.IntPriorityId);
					_entries.Add(tbl_classSchema.TintLevelOverride);
					_entries.Add(tbl_classSchema.BtInactive);
					_entries.Add(tbl_classSchema.ParentId);
				}
				return _entries;
			}
		}
	}
	#endregion

	public abstract class tbl_class : EasyObject
	{

		public tbl_class()
		{
			tbl_classSchema _schema = new tbl_classSchema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "dbo";
		}
		
		public override void FlushData() 	 
		{ 	 
			this._whereClause = null; 	 
			this._aggregateClause = null; 	 
			base.FlushData(); 	 
		}
			   
		/// <summary>
		/// Loads the business object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="Id"></param>
		/// <param name="Company_id"></param>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadByPrimaryKey(int Id, int Company_id)
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					ListDictionary parameters = new ListDictionary();

					// Add in parameters
					parameters.Add(tbl_classSchema.Id.FieldName, Id);
					parameters.Add(tbl_classSchema.Company_id.FieldName, Company_id);

					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "Gettbl_class", parameters, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.Id.Value = Id;
					this.Where.Company_id.Value = Company_id;
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}
	
		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll()
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "GetAlltbl_class", null, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		/// <summary>
		/// Adds a new record to the internal table.
		/// </summary>
		public override void AddNew()
		{
			base.AddNew();
		}

		protected override DbCommand GetInsertCommand(CommandType commandType)
		{	
			DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "Addtbl_class";
					dbCommand = db.GetStoredProcCommand(sqlCommand);

					db.AddParameter(dbCommand, "id", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "id", DataRowVersion.Default, Convert.DBNull);
					CreateParameters(db, dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddInsertColumn(item);
						}
					}
					dbCommand = this.Query.GetInsertCommandWrapper();

					dbCommand.Parameters.Clear();
					CreateParameters(db, dbCommand);
					db.AddParameter(dbCommand, "id", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "id", DataRowVersion.Default, Convert.DBNull);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetUpdateCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "Updatetbl_class";
					dbCommand = db.GetStoredProcCommand(sqlCommand);

					db.AddInParameter(dbCommand, "id", DbType.Int32, "id", DataRowVersion.Current);
					CreateParameters(db, dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddUpdateColumn(item);
						}
					}

					this.Where.WhereClauseReset();
					this.Where.Id.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetUpdateCommandWrapper();

					dbCommand.Parameters.Clear();
					CreateParameters(db, dbCommand);
					db.AddInParameter(dbCommand, "id", DbType.Int32, "id", DataRowVersion.Current);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetDeleteCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = GetDatabase();

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "Deletetbl_class";
					dbCommand = db.GetStoredProcCommand(sqlCommand);
					db.AddInParameter(dbCommand, "id", DbType.Int32, "id", DataRowVersion.Current);
					db.AddInParameter(dbCommand, "company_id", DbType.Int32, "company_id", DataRowVersion.Current);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.Id.Operator = WhereParameter.Operand.Equal;
					this.Where.Company_id.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetDeleteCommandWrapper();

					dbCommand.Parameters.Clear();
					db.AddInParameter(dbCommand, "id", DbType.Int32, "id", DataRowVersion.Current);
					db.AddInParameter(dbCommand, "company_id", DbType.Int32, "company_id", DataRowVersion.Current);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		private void CreateParameters(Database db, DbCommand dbCommand)
		{
			db.AddInParameter(dbCommand, "company_id", DbType.Int32, "company_id", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "Name", DbType.AnsiString, "Name", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "LastResortTechId", DbType.Int32, "LastResortTechId", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ConfigDistributedRouting", DbType.Byte, "ConfigDistributedRouting", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "tintClassType", DbType.Byte, "tintClassType", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "bitRestrictToTechs", DbType.Boolean, "bitRestrictToTechs", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "txtDesc", DbType.AnsiString, "txtDesc", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "bitAllowEmailParsing", DbType.Boolean, "bitAllowEmailParsing", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "intPriorityId", DbType.Int32, "intPriorityId", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "tintLevelOverride", DbType.Byte, "tintLevelOverride", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "btInactive", DbType.Boolean, "btInactive", DataRowVersion.Current);
			db.AddInParameter(dbCommand, "ParentId", DbType.Int32, "ParentId", DataRowVersion.Current);
		}
		
		#region Properties
		public virtual int Id
		{
			get
			{
				return this.GetInteger(tbl_classSchema.Id.FieldName);
	    	}
			set
			{
				this.SetInteger(tbl_classSchema.Id.FieldName, value);
			}
		}
		public virtual int Company_id
		{
			get
			{
				return this.GetInteger(tbl_classSchema.Company_id.FieldName);
	    	}
			set
			{
				this.SetInteger(tbl_classSchema.Company_id.FieldName, value);
			}
		}
		public virtual string Name
		{
			get
			{
				return this.GetString(tbl_classSchema.Name.FieldName);
	    	}
			set
			{
				this.SetString(tbl_classSchema.Name.FieldName, value);
			}
		}
		public virtual int LastResortTechId
		{
			get
			{
				return this.GetInteger(tbl_classSchema.LastResortTechId.FieldName);
	    	}
			set
			{
				this.SetInteger(tbl_classSchema.LastResortTechId.FieldName, value);
			}
		}
		public virtual byte ConfigDistributedRouting
		{
			get
			{
				return this.GetByte(tbl_classSchema.ConfigDistributedRouting.FieldName);
	    	}
			set
			{
				this.SetByte(tbl_classSchema.ConfigDistributedRouting.FieldName, value);
			}
		}
		public virtual byte TintClassType
		{
			get
			{
				return this.GetByte(tbl_classSchema.TintClassType.FieldName);
	    	}
			set
			{
				this.SetByte(tbl_classSchema.TintClassType.FieldName, value);
			}
		}
		public virtual bool BitRestrictToTechs
		{
			get
			{
				return this.GetBoolean(tbl_classSchema.BitRestrictToTechs.FieldName);
	    	}
			set
			{
				this.SetBoolean(tbl_classSchema.BitRestrictToTechs.FieldName, value);
			}
		}
		public virtual string TxtDesc
		{
			get
			{
				return this.GetString(tbl_classSchema.TxtDesc.FieldName);
	    	}
			set
			{
				this.SetString(tbl_classSchema.TxtDesc.FieldName, value);
			}
		}
		public virtual bool BitAllowEmailParsing
		{
			get
			{
				return this.GetBoolean(tbl_classSchema.BitAllowEmailParsing.FieldName);
	    	}
			set
			{
				this.SetBoolean(tbl_classSchema.BitAllowEmailParsing.FieldName, value);
			}
		}
		public virtual int IntPriorityId
		{
			get
			{
				return this.GetInteger(tbl_classSchema.IntPriorityId.FieldName);
	    	}
			set
			{
				this.SetInteger(tbl_classSchema.IntPriorityId.FieldName, value);
			}
		}
		public virtual byte TintLevelOverride
		{
			get
			{
				return this.GetByte(tbl_classSchema.TintLevelOverride.FieldName);
	    	}
			set
			{
				this.SetByte(tbl_classSchema.TintLevelOverride.FieldName, value);
			}
		}
		public virtual bool BtInactive
		{
			get
			{
				return this.GetBoolean(tbl_classSchema.BtInactive.FieldName);
	    	}
			set
			{
				this.SetBoolean(tbl_classSchema.BtInactive.FieldName, value);
			}
		}
		public virtual int ParentId
		{
			get
			{
				return this.GetInteger(tbl_classSchema.ParentId.FieldName);
	    	}
			set
			{
				this.SetInteger(tbl_classSchema.ParentId.FieldName, value);
			}
		}

		public override string TableName
		{
			get { return "tbl_class"; }
		}
		
		#endregion		
		
		#region String Properties
	
		public virtual string s_Id
	    {
			get
	        {
				return this.IsColumnNull(tbl_classSchema.Id.FieldName) ? string.Empty : base.GetIntegerAsString(tbl_classSchema.Id.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(tbl_classSchema.Id.FieldName);
				else
					this.Id = base.SetIntegerAsString(tbl_classSchema.Id.FieldName, value);
			}
		}

		public virtual string s_Company_id
	    {
			get
	        {
				return this.IsColumnNull(tbl_classSchema.Company_id.FieldName) ? string.Empty : base.GetIntegerAsString(tbl_classSchema.Company_id.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(tbl_classSchema.Company_id.FieldName);
				else
					this.Company_id = base.SetIntegerAsString(tbl_classSchema.Company_id.FieldName, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(tbl_classSchema.Name.FieldName) ? string.Empty : base.GetStringAsString(tbl_classSchema.Name.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(tbl_classSchema.Name.FieldName);
				else
					this.Name = base.SetStringAsString(tbl_classSchema.Name.FieldName, value);
			}
		}

		public virtual string s_LastResortTechId
	    {
			get
	        {
				return this.IsColumnNull(tbl_classSchema.LastResortTechId.FieldName) ? string.Empty : base.GetIntegerAsString(tbl_classSchema.LastResortTechId.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(tbl_classSchema.LastResortTechId.FieldName);
				else
					this.LastResortTechId = base.SetIntegerAsString(tbl_classSchema.LastResortTechId.FieldName, value);
			}
		}

		public virtual string s_ConfigDistributedRouting
	    {
			get
	        {
				return this.IsColumnNull(tbl_classSchema.ConfigDistributedRouting.FieldName) ? string.Empty : base.GetByteAsString(tbl_classSchema.ConfigDistributedRouting.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(tbl_classSchema.ConfigDistributedRouting.FieldName);
				else
					this.ConfigDistributedRouting = base.SetByteAsString(tbl_classSchema.ConfigDistributedRouting.FieldName, value);
			}
		}

		public virtual string s_TintClassType
	    {
			get
	        {
				return this.IsColumnNull(tbl_classSchema.TintClassType.FieldName) ? string.Empty : base.GetByteAsString(tbl_classSchema.TintClassType.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(tbl_classSchema.TintClassType.FieldName);
				else
					this.TintClassType = base.SetByteAsString(tbl_classSchema.TintClassType.FieldName, value);
			}
		}

		public virtual string s_BitRestrictToTechs
	    {
			get
	        {
				return this.IsColumnNull(tbl_classSchema.BitRestrictToTechs.FieldName) ? string.Empty : base.GetBooleanAsString(tbl_classSchema.BitRestrictToTechs.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(tbl_classSchema.BitRestrictToTechs.FieldName);
				else
					this.BitRestrictToTechs = base.SetBooleanAsString(tbl_classSchema.BitRestrictToTechs.FieldName, value);
			}
		}

		public virtual string s_TxtDesc
	    {
			get
	        {
				return this.IsColumnNull(tbl_classSchema.TxtDesc.FieldName) ? string.Empty : base.GetStringAsString(tbl_classSchema.TxtDesc.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(tbl_classSchema.TxtDesc.FieldName);
				else
					this.TxtDesc = base.SetStringAsString(tbl_classSchema.TxtDesc.FieldName, value);
			}
		}

		public virtual string s_BitAllowEmailParsing
	    {
			get
	        {
				return this.IsColumnNull(tbl_classSchema.BitAllowEmailParsing.FieldName) ? string.Empty : base.GetBooleanAsString(tbl_classSchema.BitAllowEmailParsing.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(tbl_classSchema.BitAllowEmailParsing.FieldName);
				else
					this.BitAllowEmailParsing = base.SetBooleanAsString(tbl_classSchema.BitAllowEmailParsing.FieldName, value);
			}
		}

		public virtual string s_IntPriorityId
	    {
			get
	        {
				return this.IsColumnNull(tbl_classSchema.IntPriorityId.FieldName) ? string.Empty : base.GetIntegerAsString(tbl_classSchema.IntPriorityId.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(tbl_classSchema.IntPriorityId.FieldName);
				else
					this.IntPriorityId = base.SetIntegerAsString(tbl_classSchema.IntPriorityId.FieldName, value);
			}
		}

		public virtual string s_TintLevelOverride
	    {
			get
	        {
				return this.IsColumnNull(tbl_classSchema.TintLevelOverride.FieldName) ? string.Empty : base.GetByteAsString(tbl_classSchema.TintLevelOverride.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(tbl_classSchema.TintLevelOverride.FieldName);
				else
					this.TintLevelOverride = base.SetByteAsString(tbl_classSchema.TintLevelOverride.FieldName, value);
			}
		}

		public virtual string s_BtInactive
	    {
			get
	        {
				return this.IsColumnNull(tbl_classSchema.BtInactive.FieldName) ? string.Empty : base.GetBooleanAsString(tbl_classSchema.BtInactive.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(tbl_classSchema.BtInactive.FieldName);
				else
					this.BtInactive = base.SetBooleanAsString(tbl_classSchema.BtInactive.FieldName, value);
			}
		}

		public virtual string s_ParentId
	    {
			get
	        {
				return this.IsColumnNull(tbl_classSchema.ParentId.FieldName) ? string.Empty : base.GetIntegerAsString(tbl_classSchema.ParentId.FieldName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(tbl_classSchema.ParentId.FieldName);
				else
					this.ParentId = base.SetIntegerAsString(tbl_classSchema.ParentId.FieldName, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Id
				{
					get
					{
							WhereParameter wp = new WhereParameter(tbl_classSchema.Id);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Company_id
				{
					get
					{
							WhereParameter wp = new WhereParameter(tbl_classSchema.Company_id);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter wp = new WhereParameter(tbl_classSchema.Name);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter LastResortTechId
				{
					get
					{
							WhereParameter wp = new WhereParameter(tbl_classSchema.LastResortTechId);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ConfigDistributedRouting
				{
					get
					{
							WhereParameter wp = new WhereParameter(tbl_classSchema.ConfigDistributedRouting);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter TintClassType
				{
					get
					{
							WhereParameter wp = new WhereParameter(tbl_classSchema.TintClassType);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter BitRestrictToTechs
				{
					get
					{
							WhereParameter wp = new WhereParameter(tbl_classSchema.BitRestrictToTechs);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter TxtDesc
				{
					get
					{
							WhereParameter wp = new WhereParameter(tbl_classSchema.TxtDesc);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter BitAllowEmailParsing
				{
					get
					{
							WhereParameter wp = new WhereParameter(tbl_classSchema.BitAllowEmailParsing);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter IntPriorityId
				{
					get
					{
							WhereParameter wp = new WhereParameter(tbl_classSchema.IntPriorityId);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter TintLevelOverride
				{
					get
					{
							WhereParameter wp = new WhereParameter(tbl_classSchema.TintLevelOverride);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter BtInactive
				{
					get
					{
							WhereParameter wp = new WhereParameter(tbl_classSchema.BtInactive);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}

				public WhereParameter ParentId
				{
					get
					{
							WhereParameter wp = new WhereParameter(tbl_classSchema.ParentId);
							this._clause._entity.Query.AddWhereParameter(wp);
							return wp;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public WhereParameter Company_id
		    {
				get
		        {
					if(_Company_id_W == null)
	        	    {
						_Company_id_W = TearOff.Company_id;
					}
					return _Company_id_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter LastResortTechId
		    {
				get
		        {
					if(_LastResortTechId_W == null)
	        	    {
						_LastResortTechId_W = TearOff.LastResortTechId;
					}
					return _LastResortTechId_W;
				}
			}

			public WhereParameter ConfigDistributedRouting
		    {
				get
		        {
					if(_ConfigDistributedRouting_W == null)
	        	    {
						_ConfigDistributedRouting_W = TearOff.ConfigDistributedRouting;
					}
					return _ConfigDistributedRouting_W;
				}
			}

			public WhereParameter TintClassType
		    {
				get
		        {
					if(_TintClassType_W == null)
	        	    {
						_TintClassType_W = TearOff.TintClassType;
					}
					return _TintClassType_W;
				}
			}

			public WhereParameter BitRestrictToTechs
		    {
				get
		        {
					if(_BitRestrictToTechs_W == null)
	        	    {
						_BitRestrictToTechs_W = TearOff.BitRestrictToTechs;
					}
					return _BitRestrictToTechs_W;
				}
			}

			public WhereParameter TxtDesc
		    {
				get
		        {
					if(_TxtDesc_W == null)
	        	    {
						_TxtDesc_W = TearOff.TxtDesc;
					}
					return _TxtDesc_W;
				}
			}

			public WhereParameter BitAllowEmailParsing
		    {
				get
		        {
					if(_BitAllowEmailParsing_W == null)
	        	    {
						_BitAllowEmailParsing_W = TearOff.BitAllowEmailParsing;
					}
					return _BitAllowEmailParsing_W;
				}
			}

			public WhereParameter IntPriorityId
		    {
				get
		        {
					if(_IntPriorityId_W == null)
	        	    {
						_IntPriorityId_W = TearOff.IntPriorityId;
					}
					return _IntPriorityId_W;
				}
			}

			public WhereParameter TintLevelOverride
		    {
				get
		        {
					if(_TintLevelOverride_W == null)
	        	    {
						_TintLevelOverride_W = TearOff.TintLevelOverride;
					}
					return _TintLevelOverride_W;
				}
			}

			public WhereParameter BtInactive
		    {
				get
		        {
					if(_BtInactive_W == null)
	        	    {
						_BtInactive_W = TearOff.BtInactive;
					}
					return _BtInactive_W;
				}
			}

			public WhereParameter ParentId
		    {
				get
		        {
					if(_ParentId_W == null)
	        	    {
						_ParentId_W = TearOff.ParentId;
					}
					return _ParentId_W;
				}
			}

			private WhereParameter _Id_W = null;
			private WhereParameter _Company_id_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _LastResortTechId_W = null;
			private WhereParameter _ConfigDistributedRouting_W = null;
			private WhereParameter _TintClassType_W = null;
			private WhereParameter _BitRestrictToTechs_W = null;
			private WhereParameter _TxtDesc_W = null;
			private WhereParameter _BitAllowEmailParsing_W = null;
			private WhereParameter _IntPriorityId_W = null;
			private WhereParameter _TintLevelOverride_W = null;
			private WhereParameter _BtInactive_W = null;
			private WhereParameter _ParentId_W = null;

			public void WhereClauseReset()
			{
				_Id_W = null;
				_Company_id_W = null;
				_Name_W = null;
				_LastResortTechId_W = null;
				_ConfigDistributedRouting_W = null;
				_TintClassType_W = null;
				_BitRestrictToTechs_W = null;
				_TxtDesc_W = null;
				_BitAllowEmailParsing_W = null;
				_IntPriorityId_W = null;
				_TintLevelOverride_W = null;
				_BtInactive_W = null;
				_ParentId_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Id
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(tbl_classSchema.Id);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Company_id
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(tbl_classSchema.Company_id);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(tbl_classSchema.Name);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter LastResortTechId
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(tbl_classSchema.LastResortTechId);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ConfigDistributedRouting
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(tbl_classSchema.ConfigDistributedRouting);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter TintClassType
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(tbl_classSchema.TintClassType);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter BitRestrictToTechs
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(tbl_classSchema.BitRestrictToTechs);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter TxtDesc
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(tbl_classSchema.TxtDesc);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter BitAllowEmailParsing
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(tbl_classSchema.BitAllowEmailParsing);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter IntPriorityId
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(tbl_classSchema.IntPriorityId);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter TintLevelOverride
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(tbl_classSchema.TintLevelOverride);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter BtInactive
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(tbl_classSchema.BtInactive);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}

				public AggregateParameter ParentId
				{
					get
					{
							AggregateParameter ap = new AggregateParameter(tbl_classSchema.ParentId);
							this._clause._entity.Query.AddAggregateParameter(ap);
							return ap;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public AggregateParameter Company_id
		    {
				get
		        {
					if(_Company_id_W == null)
	        	    {
						_Company_id_W = TearOff.Company_id;
					}
					return _Company_id_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter LastResortTechId
		    {
				get
		        {
					if(_LastResortTechId_W == null)
	        	    {
						_LastResortTechId_W = TearOff.LastResortTechId;
					}
					return _LastResortTechId_W;
				}
			}

			public AggregateParameter ConfigDistributedRouting
		    {
				get
		        {
					if(_ConfigDistributedRouting_W == null)
	        	    {
						_ConfigDistributedRouting_W = TearOff.ConfigDistributedRouting;
					}
					return _ConfigDistributedRouting_W;
				}
			}

			public AggregateParameter TintClassType
		    {
				get
		        {
					if(_TintClassType_W == null)
	        	    {
						_TintClassType_W = TearOff.TintClassType;
					}
					return _TintClassType_W;
				}
			}

			public AggregateParameter BitRestrictToTechs
		    {
				get
		        {
					if(_BitRestrictToTechs_W == null)
	        	    {
						_BitRestrictToTechs_W = TearOff.BitRestrictToTechs;
					}
					return _BitRestrictToTechs_W;
				}
			}

			public AggregateParameter TxtDesc
		    {
				get
		        {
					if(_TxtDesc_W == null)
	        	    {
						_TxtDesc_W = TearOff.TxtDesc;
					}
					return _TxtDesc_W;
				}
			}

			public AggregateParameter BitAllowEmailParsing
		    {
				get
		        {
					if(_BitAllowEmailParsing_W == null)
	        	    {
						_BitAllowEmailParsing_W = TearOff.BitAllowEmailParsing;
					}
					return _BitAllowEmailParsing_W;
				}
			}

			public AggregateParameter IntPriorityId
		    {
				get
		        {
					if(_IntPriorityId_W == null)
	        	    {
						_IntPriorityId_W = TearOff.IntPriorityId;
					}
					return _IntPriorityId_W;
				}
			}

			public AggregateParameter TintLevelOverride
		    {
				get
		        {
					if(_TintLevelOverride_W == null)
	        	    {
						_TintLevelOverride_W = TearOff.TintLevelOverride;
					}
					return _TintLevelOverride_W;
				}
			}

			public AggregateParameter BtInactive
		    {
				get
		        {
					if(_BtInactive_W == null)
	        	    {
						_BtInactive_W = TearOff.BtInactive;
					}
					return _BtInactive_W;
				}
			}

			public AggregateParameter ParentId
		    {
				get
		        {
					if(_ParentId_W == null)
	        	    {
						_ParentId_W = TearOff.ParentId;
					}
					return _ParentId_W;
				}
			}

			private AggregateParameter _Id_W = null;
			private AggregateParameter _Company_id_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _LastResortTechId_W = null;
			private AggregateParameter _ConfigDistributedRouting_W = null;
			private AggregateParameter _TintClassType_W = null;
			private AggregateParameter _BitRestrictToTechs_W = null;
			private AggregateParameter _TxtDesc_W = null;
			private AggregateParameter _BitAllowEmailParsing_W = null;
			private AggregateParameter _IntPriorityId_W = null;
			private AggregateParameter _TintLevelOverride_W = null;
			private AggregateParameter _BtInactive_W = null;
			private AggregateParameter _ParentId_W = null;

			public void AggregateClauseReset()
			{
				_Id_W = null;
				_Company_id_W = null;
				_Name_W = null;
				_LastResortTechId_W = null;
				_ConfigDistributedRouting_W = null;
				_TintClassType_W = null;
				_BitRestrictToTechs_W = null;
				_TxtDesc_W = null;
				_BitAllowEmailParsing_W = null;
				_IntPriorityId_W = null;
				_TintLevelOverride_W = null;
				_BtInactive_W = null;
				_ParentId_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	}
}
