/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.2)

using System;
using System.Data;
using System.Data.Common;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace BWA.bigWebDesk.DAL
{

    #region Schema

    public class LocationRouteLevelsSchema : NCI.EasyObjects.Schema
    {
        private static ArrayList _entries;
        public static SchemaItem Id = new SchemaItem("Id", DbType.Int32, true, false, false, true, true, false);
        public static SchemaItem DId = new SchemaItem("DId", DbType.Int32, false, false, false, true, true, false);
        public static SchemaItem LocationId = new SchemaItem("LocationId", DbType.Int32, false, false, false, false, false, false);
        public static SchemaItem TicketLevel = new SchemaItem("TicketLevel", DbType.Byte, false, false, false, false, false, false);
        public static SchemaItem TechPoolType = new SchemaItem("TechPoolType", DbType.Int32, false, false, false, false, false, true);
        public static SchemaItem RoutingMethod = new SchemaItem("RoutingMethod", DbType.Int32, false, false, false, false, false, true);
        public static SchemaItem LastResortTechId = new SchemaItem("LastResortTechId", DbType.Int32, false, false, false, false, true, false);

        public override ArrayList SchemaEntries
        {
            get
            {
                if (_entries == null)
                {
                    _entries = new ArrayList();
                    _entries.Add(LocationRouteLevelsSchema.Id);
                    _entries.Add(LocationRouteLevelsSchema.DId);
                    _entries.Add(LocationRouteLevelsSchema.LocationId);
                    _entries.Add(LocationRouteLevelsSchema.TicketLevel);
                    _entries.Add(LocationRouteLevelsSchema.TechPoolType);
                    _entries.Add(LocationRouteLevelsSchema.RoutingMethod);
                    _entries.Add(LocationRouteLevelsSchema.LastResortTechId);
                }
                return _entries;
            }
        }
    }
    #endregion

    public abstract class LocationRouteLevels : EasyObject
    {

        public LocationRouteLevels()
        {
            LocationRouteLevelsSchema _schema = new LocationRouteLevelsSchema();
            this.SchemaEntries = _schema.SchemaEntries;
            this.SchemaGlobal = "dbo";
        }

        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        /// <summary>
        /// Loads the business object with info from the database, based on the requested primary key.
        /// </summary>
        /// <param name="Id"></param>
        /// <param name="DId"></param>
        /// <returns>A Boolean indicating success or failure of the query</returns>
        public bool LoadByPrimaryKey(int Id, int DId)
        {
            switch (this.DefaultCommandType)
            {
                case CommandType.StoredProcedure:
                    ListDictionary parameters = new ListDictionary();

                    // Add in parameters
                    parameters.Add(LocationRouteLevelsSchema.Id.FieldName, Id);
                    parameters.Add(LocationRouteLevelsSchema.DId.FieldName, DId);

                    return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "GetLocationRouteLevels", parameters, CommandType.StoredProcedure);

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    this.Where.Id.Value = Id;
                    this.Where.DId.Value = DId;
                    return this.Query.Load();

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        /// <summary>
        /// Loads all records from the table.
        /// </summary>
        /// <returns>A Boolean indicating success or failure of the query</returns>
        public bool LoadAll()
        {
            switch (this.DefaultCommandType)
            {
                case CommandType.StoredProcedure:
                    return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "GetAllLocationRouteLevels", null, CommandType.StoredProcedure);

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    return this.Query.Load();

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        /// <summary>
        /// Adds a new record to the internal table.
        /// </summary>
        public override void AddNew()
        {
            base.AddNew();
        }

        protected override DbCommand GetInsertCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "AddLocationRouteLevels";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);

                    db.AddParameter(dbCommand, "Id", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "Id", DataRowVersion.Default, Convert.DBNull);
                    CreateParameters(db, dbCommand);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    foreach (SchemaItem item in this.SchemaEntries)
                    {
                        if (!(item.IsAutoKey || item.IsComputed))
                        {
                            this.Query.AddInsertColumn(item);
                        }
                    }
                    dbCommand = this.Query.GetInsertCommandWrapper();

                    dbCommand.Parameters.Clear();
                    CreateParameters(db, dbCommand);
                    db.AddParameter(dbCommand, "Id", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "Id", DataRowVersion.Default, Convert.DBNull);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        protected override DbCommand GetUpdateCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "UpdateLocationRouteLevels";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);

                    db.AddInParameter(dbCommand, "Id", DbType.Int32, "Id", DataRowVersion.Current);
                    CreateParameters(db, dbCommand);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    foreach (SchemaItem item in this.SchemaEntries)
                    {
                        if (!(item.IsAutoKey || item.IsComputed))
                        {
                            this.Query.AddUpdateColumn(item);
                        }
                    }

                    this.Where.WhereClauseReset();
                    this.Where.Id.Operator = WhereParameter.Operand.Equal;
                    dbCommand = this.Query.GetUpdateCommandWrapper();

                    dbCommand.Parameters.Clear();
                    CreateParameters(db, dbCommand);
                    db.AddInParameter(dbCommand, "Id", DbType.Int32, "Id", DataRowVersion.Current);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        protected override DbCommand GetDeleteCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "DeleteLocationRouteLevels";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);
                    db.AddInParameter(dbCommand, "Id", DbType.Int32, "Id", DataRowVersion.Current);
                    db.AddInParameter(dbCommand, "DId", DbType.Int32, "DId", DataRowVersion.Current);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    this.Where.Id.Operator = WhereParameter.Operand.Equal;
                    this.Where.DId.Operator = WhereParameter.Operand.Equal;
                    dbCommand = this.Query.GetDeleteCommandWrapper();

                    dbCommand.Parameters.Clear();
                    db.AddInParameter(dbCommand, "Id", DbType.Int32, "Id", DataRowVersion.Current);
                    db.AddInParameter(dbCommand, "DId", DbType.Int32, "DId", DataRowVersion.Current);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        private void CreateParameters(Database db, DbCommand dbCommand)
        {
            db.AddInParameter(dbCommand, "DId", DbType.Int32, "DId", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "LocationId", DbType.Int32, "LocationId", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "TicketLevel", DbType.Byte, "TicketLevel", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "TechPoolType", DbType.Int32, "TechPoolType", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "RoutingMethod", DbType.Int32, "RoutingMethod", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "LastResortTechId", DbType.Int32, "LastResortTechId", DataRowVersion.Current);
        }

        #region Properties
        public virtual int Id
        {
            get
            {
                return this.GetInteger(LocationRouteLevelsSchema.Id.FieldName);
            }
            set
            {
                this.SetInteger(LocationRouteLevelsSchema.Id.FieldName, value);
            }
        }
        public virtual int DId
        {
            get
            {
                return this.GetInteger(LocationRouteLevelsSchema.DId.FieldName);
            }
            set
            {
                this.SetInteger(LocationRouteLevelsSchema.DId.FieldName, value);
            }
        }
        public virtual int LocationId
        {
            get
            {
                return this.GetInteger(LocationRouteLevelsSchema.LocationId.FieldName);
            }
            set
            {
                this.SetInteger(LocationRouteLevelsSchema.LocationId.FieldName, value);
            }
        }
        public virtual byte TicketLevel
        {
            get
            {
                return this.GetByte(LocationRouteLevelsSchema.TicketLevel.FieldName);
            }
            set
            {
                this.SetByte(LocationRouteLevelsSchema.TicketLevel.FieldName, value);
            }
        }
        public virtual int TechPoolType
        {
            get
            {
                return this.GetInteger(LocationRouteLevelsSchema.TechPoolType.FieldName);
            }
            set
            {
                this.SetInteger(LocationRouteLevelsSchema.TechPoolType.FieldName, value);
            }
        }
        public virtual int RoutingMethod
        {
            get
            {
                return this.GetInteger(LocationRouteLevelsSchema.RoutingMethod.FieldName);
            }
            set
            {
                this.SetInteger(LocationRouteLevelsSchema.RoutingMethod.FieldName, value);
            }
        }
        public virtual int LastResortTechId
        {
            get
            {
                return this.GetInteger(LocationRouteLevelsSchema.LastResortTechId.FieldName);
            }
            set
            {
                this.SetInteger(LocationRouteLevelsSchema.LastResortTechId.FieldName, value);
            }
        }

        public override string TableName
        {
            get { return "LocationRouteLevels"; }
        }

        #endregion

        #region String Properties

        public virtual string s_Id
        {
            get
            {
                return this.IsColumnNull(LocationRouteLevelsSchema.Id.FieldName) ? string.Empty : base.GetIntegerAsString(LocationRouteLevelsSchema.Id.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(LocationRouteLevelsSchema.Id.FieldName);
                else
                    this.Id = base.SetIntegerAsString(LocationRouteLevelsSchema.Id.FieldName, value);
            }
        }

        public virtual string s_DId
        {
            get
            {
                return this.IsColumnNull(LocationRouteLevelsSchema.DId.FieldName) ? string.Empty : base.GetIntegerAsString(LocationRouteLevelsSchema.DId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(LocationRouteLevelsSchema.DId.FieldName);
                else
                    this.DId = base.SetIntegerAsString(LocationRouteLevelsSchema.DId.FieldName, value);
            }
        }

        public virtual string s_LocationId
        {
            get
            {
                return this.IsColumnNull(LocationRouteLevelsSchema.LocationId.FieldName) ? string.Empty : base.GetIntegerAsString(LocationRouteLevelsSchema.LocationId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(LocationRouteLevelsSchema.LocationId.FieldName);
                else
                    this.LocationId = base.SetIntegerAsString(LocationRouteLevelsSchema.LocationId.FieldName, value);
            }
        }

        public virtual string s_TicketLevel
        {
            get
            {
                return this.IsColumnNull(LocationRouteLevelsSchema.TicketLevel.FieldName) ? string.Empty : base.GetByteAsString(LocationRouteLevelsSchema.TicketLevel.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(LocationRouteLevelsSchema.TicketLevel.FieldName);
                else
                    this.TicketLevel = base.SetByteAsString(LocationRouteLevelsSchema.TicketLevel.FieldName, value);
            }
        }

        public virtual string s_TechPoolType
        {
            get
            {
                return this.IsColumnNull(LocationRouteLevelsSchema.TechPoolType.FieldName) ? string.Empty : base.GetIntegerAsString(LocationRouteLevelsSchema.TechPoolType.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(LocationRouteLevelsSchema.TechPoolType.FieldName);
                else
                    this.TechPoolType = base.SetIntegerAsString(LocationRouteLevelsSchema.TechPoolType.FieldName, value);
            }
        }

        public virtual string s_RoutingMethod
        {
            get
            {
                return this.IsColumnNull(LocationRouteLevelsSchema.RoutingMethod.FieldName) ? string.Empty : base.GetIntegerAsString(LocationRouteLevelsSchema.RoutingMethod.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(LocationRouteLevelsSchema.RoutingMethod.FieldName);
                else
                    this.RoutingMethod = base.SetIntegerAsString(LocationRouteLevelsSchema.RoutingMethod.FieldName, value);
            }
        }

        public virtual string s_LastResortTechId
        {
            get
            {
                return this.IsColumnNull(LocationRouteLevelsSchema.LastResortTechId.FieldName) ? string.Empty : base.GetIntegerAsString(LocationRouteLevelsSchema.LastResortTechId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(LocationRouteLevelsSchema.LastResortTechId.FieldName);
                else
                    this.LastResortTechId = base.SetIntegerAsString(LocationRouteLevelsSchema.LastResortTechId.FieldName, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter Id
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(LocationRouteLevelsSchema.Id);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter DId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(LocationRouteLevelsSchema.DId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter LocationId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(LocationRouteLevelsSchema.LocationId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter TicketLevel
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(LocationRouteLevelsSchema.TicketLevel);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter TechPoolType
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(LocationRouteLevelsSchema.TechPoolType);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter RoutingMethod
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(LocationRouteLevelsSchema.RoutingMethod);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter LastResortTechId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(LocationRouteLevelsSchema.LastResortTechId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter Id
            {
                get
                {
                    if (_Id_W == null)
                    {
                        _Id_W = TearOff.Id;
                    }
                    return _Id_W;
                }
            }

            public WhereParameter DId
            {
                get
                {
                    if (_DId_W == null)
                    {
                        _DId_W = TearOff.DId;
                    }
                    return _DId_W;
                }
            }

            public WhereParameter LocationId
            {
                get
                {
                    if (_LocationId_W == null)
                    {
                        _LocationId_W = TearOff.LocationId;
                    }
                    return _LocationId_W;
                }
            }

            public WhereParameter TicketLevel
            {
                get
                {
                    if (_TicketLevel_W == null)
                    {
                        _TicketLevel_W = TearOff.TicketLevel;
                    }
                    return _TicketLevel_W;
                }
            }

            public WhereParameter TechPoolType
            {
                get
                {
                    if (_TechPoolType_W == null)
                    {
                        _TechPoolType_W = TearOff.TechPoolType;
                    }
                    return _TechPoolType_W;
                }
            }

            public WhereParameter RoutingMethod
            {
                get
                {
                    if (_RoutingMethod_W == null)
                    {
                        _RoutingMethod_W = TearOff.RoutingMethod;
                    }
                    return _RoutingMethod_W;
                }
            }

            public WhereParameter LastResortTechId
            {
                get
                {
                    if (_LastResortTechId_W == null)
                    {
                        _LastResortTechId_W = TearOff.LastResortTechId;
                    }
                    return _LastResortTechId_W;
                }
            }

            private WhereParameter _Id_W = null;
            private WhereParameter _DId_W = null;
            private WhereParameter _LocationId_W = null;
            private WhereParameter _TicketLevel_W = null;
            private WhereParameter _TechPoolType_W = null;
            private WhereParameter _RoutingMethod_W = null;
            private WhereParameter _LastResortTechId_W = null;

            public void WhereClauseReset()
            {
                _Id_W = null;
                _DId_W = null;
                _LocationId_W = null;
                _TicketLevel_W = null;
                _TechPoolType_W = null;
                _RoutingMethod_W = null;
                _LastResortTechId_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private EasyObject _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter Id
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(LocationRouteLevelsSchema.Id);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter DId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(LocationRouteLevelsSchema.DId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter LocationId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(LocationRouteLevelsSchema.LocationId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter TicketLevel
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(LocationRouteLevelsSchema.TicketLevel);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter TechPoolType
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(LocationRouteLevelsSchema.TechPoolType);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter RoutingMethod
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(LocationRouteLevelsSchema.RoutingMethod);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter LastResortTechId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(LocationRouteLevelsSchema.LastResortTechId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter Id
            {
                get
                {
                    if (_Id_W == null)
                    {
                        _Id_W = TearOff.Id;
                    }
                    return _Id_W;
                }
            }

            public AggregateParameter DId
            {
                get
                {
                    if (_DId_W == null)
                    {
                        _DId_W = TearOff.DId;
                    }
                    return _DId_W;
                }
            }

            public AggregateParameter LocationId
            {
                get
                {
                    if (_LocationId_W == null)
                    {
                        _LocationId_W = TearOff.LocationId;
                    }
                    return _LocationId_W;
                }
            }

            public AggregateParameter TicketLevel
            {
                get
                {
                    if (_TicketLevel_W == null)
                    {
                        _TicketLevel_W = TearOff.TicketLevel;
                    }
                    return _TicketLevel_W;
                }
            }

            public AggregateParameter TechPoolType
            {
                get
                {
                    if (_TechPoolType_W == null)
                    {
                        _TechPoolType_W = TearOff.TechPoolType;
                    }
                    return _TechPoolType_W;
                }
            }

            public AggregateParameter RoutingMethod
            {
                get
                {
                    if (_RoutingMethod_W == null)
                    {
                        _RoutingMethod_W = TearOff.RoutingMethod;
                    }
                    return _RoutingMethod_W;
                }
            }

            public AggregateParameter LastResortTechId
            {
                get
                {
                    if (_LastResortTechId_W == null)
                    {
                        _LastResortTechId_W = TearOff.LastResortTechId;
                    }
                    return _LastResortTechId_W;
                }
            }

            private AggregateParameter _Id_W = null;
            private AggregateParameter _DId_W = null;
            private AggregateParameter _LocationId_W = null;
            private AggregateParameter _TicketLevel_W = null;
            private AggregateParameter _TechPoolType_W = null;
            private AggregateParameter _RoutingMethod_W = null;
            private AggregateParameter _LastResortTechId_W = null;

            public void AggregateClauseReset()
            {
                _Id_W = null;
                _DId_W = null;
                _LocationId_W = null;
                _TicketLevel_W = null;
                _TechPoolType_W = null;
                _RoutingMethod_W = null;
                _LastResortTechId_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private EasyObject _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion
    }
}



